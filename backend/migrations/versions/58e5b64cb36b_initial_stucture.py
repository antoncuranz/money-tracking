"""Initial stucture

Revision ID: 58e5b64cb36b
Revises: 
Create Date: 2025-03-08 22:10:59.115094

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '58e5b64cb36b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('exchange',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('amount_usd', sa.Integer(), nullable=False),
    sa.Column('exchange_rate', sa.Numeric(scale=8), nullable=False),
    sa.Column('amount_eur', sa.Integer(), nullable=True),
    sa.Column('paid_eur', sa.Integer(), nullable=False),
    sa.Column('fees_eur', sa.Integer(), nullable=True),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('actual_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('actual_id'),
    sa.UniqueConstraint('import_id')
    )
    op.create_table('exchangerate',
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('source', sa.Integer(), nullable=False),
    sa.Column('exchange_rate', sa.Numeric(scale=8), nullable=False),
    sa.PrimaryKeyConstraint('date', 'source')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('super_user', sa.Boolean(), nullable=False),
    sa.Column('actual_sync_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('actual_encryption_password', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bankaccount',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('institution', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('balance', sa.Integer(), nullable=False),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('account',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('bank_account_id', sa.Integer(), nullable=True),
    sa.Column('actual_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('institution', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('due_day', sa.Integer(), nullable=True),
    sa.Column('autopay_offset', sa.Integer(), nullable=True),
    sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('color', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('target_spend', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['bank_account_id'], ['bankaccount.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credit',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('counterparty', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('amount_usd', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('import_id')
    )
    op.create_table('payment',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('actual_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('counterparty', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('amount_usd', sa.Integer(), nullable=False),
    sa.Column('amount_eur', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('import_id')
    )
    op.create_table('exchangepayment',
    sa.Column('exchange_id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['exchange_id'], ['exchange.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ),
    sa.PrimaryKeyConstraint('exchange_id', 'payment_id')
    )
    op.create_table('transaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('account_id', sa.Integer(), nullable=False),
    sa.Column('payment_id', sa.Integer(), nullable=True),
    sa.Column('import_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('actual_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('counterparty', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('category', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('amount_usd', sa.Integer(), nullable=False),
    sa.Column('amount_eur', sa.Integer(), nullable=True),
    sa.Column('status', sa.Integer(), nullable=False),
    sa.Column('fees_and_risk_eur', sa.Integer(), nullable=True),
    sa.Column('ignore', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['account_id'], ['account.id'], ),
    sa.ForeignKeyConstraint(['payment_id'], ['payment.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('import_id')
    )
    op.create_table('credittransaction',
    sa.Column('credit_id', sa.Integer(), nullable=False),
    sa.Column('transaction_id', sa.Integer(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['credit_id'], ['credit.id'], ),
    sa.ForeignKeyConstraint(['transaction_id'], ['transaction.id'], ),
    sa.PrimaryKeyConstraint('credit_id', 'transaction_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('credittransaction')
    op.drop_table('transaction')
    op.drop_table('exchangepayment')
    op.drop_table('payment')
    op.drop_table('credit')
    op.drop_table('account')
    op.drop_table('bankaccount')
    op.drop_table('user')
    op.drop_table('exchangerate')
    op.drop_table('exchange')
    # ### end Alembic commands ###
